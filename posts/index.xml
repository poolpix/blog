<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Poulpix's Blog</title><link>https://blog.poulpix.fr/posts/</link><description>Recent content in Posts on Poulpix's Blog</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Wed, 12 Mar 2025 08:33:21 +0100</lastBuildDate><atom:link href="https://blog.poulpix.fr/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Gitlab CI Basics</title><link>https://blog.poulpix.fr/posts/gitlab-ci-basics/</link><pubDate>Wed, 12 Mar 2025 08:33:21 +0100</pubDate><guid>https://blog.poulpix.fr/posts/gitlab-ci-basics/</guid><description>&lt;h1 id="getting-started-with-gitlab-ci-the-basics">Getting Started with GitLab CI: The Basics&lt;/h1>
&lt;p>GitLab CI/CD is a powerful tool that helps automate your software development workflows. It integrates directly with GitLab repositories, making it easy to set up continuous integration and continuous deployment (CI/CD) pipelines.&lt;/p>
&lt;p>In this article, you&amp;rsquo;ll learn the basics of GitLab CI/CD, including how to define and run a simple pipeline using &lt;code>.gitlab-ci.yml&lt;/code>.&lt;/p>
&lt;h2 id="what-is-gitlab-cicd">What is GitLab CI/CD?&lt;/h2>
&lt;p>GitLab CI/CD automates the process of building, testing, and deploying code. It follows a pipeline-based approach where each change goes through multiple stages before being deployed to production.&lt;/p></description></item><item><title>8 AWS FinOps Tips</title><link>https://blog.poulpix.fr/posts/8-aws-finops-tips/</link><pubDate>Mon, 10 Mar 2025 19:06:59 +0100</pubDate><guid>https://blog.poulpix.fr/posts/8-aws-finops-tips/</guid><description>&lt;h1 id="aws-finops-best-practices-maximizing-efficiency-and-cost-control-in-the-cloud">AWS FinOps Best Practices: Maximizing Efficiency and Cost Control in the Cloud&lt;/h1>
&lt;p>In the world of technology, especially within Site Reliability Engineering (SRE) teams,
optimizing costs while maintaining high performance is a constant challenge. This is
where AWS FinOps comes into play - by implementing Financial Operations best practices
on Amazon Web Services (AWS), organizations can enhance their financial management and
improve overall cost efficiency. In this blog post, we&amp;rsquo;ll delve into some key AWS
FinOps best practices that will help you achieve these goals.&lt;/p></description></item><item><title>What Is Observability</title><link>https://blog.poulpix.fr/posts/what-is-observability/</link><pubDate>Sun, 09 Mar 2025 15:12:03 +0100</pubDate><guid>https://blog.poulpix.fr/posts/what-is-observability/</guid><description>&lt;h1 id="what-is-observability">What is Observability?&lt;/h1>
&lt;p>In the ever-evolving landscape of technology and Site Reliability Engineering (SRE), observability has emerged as a critical concept. But what exactly is observability, and why is it so important? Let&amp;rsquo;s dive in.&lt;/p>
&lt;h2 id="understanding-observability">Understanding Observability&lt;/h2>
&lt;p>Observability refers to the ability to understand the internal state of a system based on its external outputs. In the context of software systems, observability encompasses the practices and tools used to monitor, track, and analyze the performance and health of applications and infrastructure.&lt;/p></description></item><item><title>Terraform : Understanding state, state lock and backend</title><link>https://blog.poulpix.fr/posts/terraform-state-and-backend/</link><pubDate>Sun, 09 Mar 2025 11:44:50 +0100</pubDate><guid>https://blog.poulpix.fr/posts/terraform-state-and-backend/</guid><description>&lt;h1 id="understanding-terraform-state-state-lock-and-backends">Understanding Terraform State, State Lock, and Backends&lt;/h1>
&lt;p>As an SRE or DevOps engineer working in a tech environment, you&amp;rsquo;ve likely encountered
Terraform - the open-source Infrastructure as Code (IaC) software tool. One critical
aspect of Terraform is its state management mechanism that enables you to track and
manage infrastructure resources effectively. This blog post delves into the concepts of
Terraform state, state locking, and backends to help you understand their significance
and usage in real-world scenarios.&lt;/p></description></item><item><title>Introduction to Argocd</title><link>https://blog.poulpix.fr/posts/introduction-to-argocd/</link><pubDate>Sun, 09 Mar 2025 10:50:22 +0100</pubDate><guid>https://blog.poulpix.fr/posts/introduction-to-argocd/</guid><description>&lt;h3 id="introduction-to-argocd-your-kubernetes-application-deployment-orchestration-solution">Introduction to ArgoCD: Your Kubernetes Application Deployment Orchestration Solution&lt;/h3>
&lt;p>In the rapidly evolving world of cloud-native computing, managing containerized
applications in environments like Kubernetes has become increasingly complex.
Organizations need robust tools that facilitate seamless deployment, version control,
and collaboration between development teams. One such tool that has gained significant
traction is &lt;strong>ArgoCD&lt;/strong>, an open-source continuous delivery (CD) tool for Kubernetes.&lt;/p>
&lt;h3 id="what-is-argocd">What is ArgoCD?&lt;/h3>
&lt;p>ArgoCD is a declarative, GitOps-based continuous delivery tool for Kubernetes
applications. It enables you to manage your application state by using Git repositories
as the single source of truth. This approach ensures that the desired state of your
environment is continuously reconciled with the actual state, reducing operational
overhead and increasing deployment reliability.&lt;/p></description></item><item><title>Hosting</title><link>https://blog.poulpix.fr/posts/hosting/</link><pubDate>Tue, 22 Feb 2022 09:54:22 +0100</pubDate><guid>https://blog.poulpix.fr/posts/hosting/</guid><description>&lt;p>As it&amp;rsquo;s a tech blog, let&amp;rsquo;s first have a look at the hosting stack !&lt;/p>
&lt;p>You may be disappointed, no big deal here.&lt;/p>
&lt;p>This blog is hosted on GitHub Pages, the free static hosting solution from GitHub. I am using &lt;a href="https://gohugo.io/">Hugo&lt;/a>, a static blog engine. If you don&amp;rsquo;t know it, have a look, it&amp;rsquo;s awesome ! No need for SQL server, or backend server (php or others).&lt;/p>
&lt;p>Each post is deployed through GitHub Actions, if you are curious, just go to &lt;a href="https://github.com/poolpix/blog">the repository of my blog&lt;/a>, it&amp;rsquo;s open. Of course, because there is nothing to hide, it&amp;rsquo;s only blog posts that are available on the web anyway (also, GitHub pages is free only for public repos :D)&lt;/p></description></item><item><title>Introduction</title><link>https://blog.poulpix.fr/posts/introduction/</link><pubDate>Mon, 21 Feb 2022 10:02:48 +0100</pubDate><guid>https://blog.poulpix.fr/posts/introduction/</guid><description>&lt;p>Welcome to Poulpix&amp;rsquo;s Blog !&lt;/p>
&lt;p>I am Valentin, currently working as a &amp;ldquo;DevOps&amp;rdquo;. It&amp;rsquo;s a very common word in the IT world now, it should represent a whole philosophy of integration between Dev teams and Ops teams, but as a job it&amp;rsquo;s actually more about modern System Administration, with Cloud part, CDN part, CI/CD part, observability part.&lt;/p>
&lt;p>On this blog I will share interesting news (DevOps, Site Reliability Engineering, Systems Administration), or some cool tasks from my working environment (currently web), that could help mates.&lt;/p></description></item></channel></rss>